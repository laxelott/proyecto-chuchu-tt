doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0') 
    link(rel='stylesheet', href='../stylesheets/dashboard.css') 
    link(rel='preconnect', href='https://fonts.googleapis.com')
    link(rel='preconnect', href='https://fonts.gstatic.com', crossorigin)
    link(href='https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap', rel='stylesheet')
    link(rel='stylesheet', href='https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css')
    script(src='https://code.jquery.com/jquery-3.6.0.min.js')
    script(src='https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js')
    script.
      $(document).ready(function() {
        // Función para obtener datos y llenar tablas
        function loadData() {
          const endpoints = {
            transports: '/api/admin/transports',
            routes: '/api/admin/routes',
            vehicles: '/api/admin/vehicles',
            drivers: '/api/admin/drivers',
            stops: '/api/admin/stops'
          };

          // Obtener datos y poblar cada tabla
          Object.entries(endpoints).forEach(([tableId, endpoint]) => {
            $.get(endpoint, function(data) {
              const tableBody = $(`#${tableId}Table tbody`);
              tableBody.empty(); // Limpiar contenido actual
              data.forEach(item => {
                // Crear filas dinámicamente para cada tabla
                const row = `<tr>
                  ${Object.values(item).map(value => `<td>${value}</td>`).join('')}
                  <td><button class="delete" data-id="${item.id}">Borrar</button></td>
                </tr>`;
                tableBody.append(row);
              });
            }).fail(function() {
              console.error(`Error loading data for ${tableId}`);
            });
          });
        }

        // Llamar a la función de carga de datos al iniciar la página
        loadData();

        // Inicializar DataTables
        $('#transportsTable, #routesTable, #vehiclesTable, #driversTable, #stopsTable').DataTable();

        // Lógica para manejar el envío de formularios y recargar la tabla correspondiente
        ['Transport', 'Route', 'Vehicle', 'Driver', 'Stop'].forEach(formType => {
          $(`#add${formType}Form`).submit(function(e) {
            e.preventDefault();
            $.post(`/api/admin/${formType.toLowerCase()}s`, $(this).serialize(), function(response) {
              alert(response.message);
              loadData(); // Recargar los datos de la tabla después de enviar
            }).fail(function(err) {
              console.error(`Error adding ${formType.toLowerCase()}:`, err);
              alert("Error al agregar. Intenta nuevamente.");
            });
          });
        });

        // Lógica para mostrar/ocultar secciones según la pestaña seleccionada
        $('li').click(function() {
          var target = $(this).data('target');
          $('section').hide(); // Ocultar todas las secciones
          $(target).show(); // Mostrar la sección seleccionada
        });

        // Mostrar la primera tabla por defecto
        $('section').hide();
        $('#transports').show();

        // Lógica de logout
        document.getElementById('logoutAdminForm').addEventListener('submit', function(e) {
          e.preventDefault();
          const token = localStorage.getItem('adminToken'); // Obtener token desde localStorage
          
          $.post('/api/admin/logoutadmin', { token }, function(response) {
            alert(response.message);
            window.location.href = '/loginadmin'; // Redirigir al login tras el logout
          });
        });
      })
    title Tablero de Administración

  body
    header
      .logo
          img(src='../icons/location.svg', alt='Logo')
          span Nintrip
      .nav
        a(href='/') Inicio
        a(href='./pasajero') Pasajero
        a(href='./conductor') Conductor
        a(href='./admin_view') Prueba de front
        form#logoutAdminForm(method="POST", action="/api/admin/logoutadmin")
          button(type="submit") Logout
    aside.sidebar
      ul
        li(data-target='#transports') Transporte
        li(data-target='#routes') Rutas
        li(data-target='#vehicles') Vehículos
        li(data-target='#drivers') Conductores
        li(data-target='#stops') Paradas

    main.content
      // Transporte Section
      section#transports
        h2 Transporte
        table#transportsTable
          thead
            tr
              th ID Transporte
              th Nombre del transporte
              th Imagen
              th Borrar
          tbody
            // Los datos se llenarán dinámicamente desde el backend

        form#addTransportForm
          input(type='text', name='name', placeholder='Nombre Transporte')
          button(type='submit') Añadir Transporte

      // Rutas Section
      section#routes
        h2 Rutas
        table#routesTable
          thead
            tr
              th ID Ruta
              th ID Transporte
              th Nombre de la ruta
              th Descripción
              th Color
              th Borrar
          tbody
            // Los datos se llenarán dinámicamente desde el backend

        form#addRouteForm
          input(type='number', name='idtransport', placeholder='ID Transporte')
          input(type='text', name='nombreruta', placeholder='Nombre Ruta')
          input(type='text', name='description', placeholder='Descripción')
          input(type='text', name='color', placeholder='Color')
          button(type='submit') Añadir Ruta

      // Paradas Section
      section#stops
        h2 Paradas
        table#stopsTable
          thead
            tr
              th ID Estación
              th ID Ruta
              th Nombre de la estación
              th Latitud
              th Longitud
              th Siguiente estación
              th Borrar
          tbody
            // Los datos se llenarán dinámicamente desde el backend

        form#addStopForm
          input(type='number', name='idruta', placeholder='ID Ruta')
          input(type='text', name='name', placeholder='Nombre Estación')
          input(type='number', step='any', name='latitude', placeholder='Latitud')
          input(type='number', step='any', name='longitude', placeholder='Longitud')
          input(type='text', name='nombrenext', placeholder='Nombre Siguiente Estación')
          button(type='submit') Añadir Estación

      // Vehículos Section
      section#vehicles
        h2 Vehículos
        table#vehiclesTable
          thead
            tr
              th ID Vehículo
              th Identificador
              th ID Conductor
              th Borrar
          tbody
            // Los datos se llenarán dinámicamente desde el backend

        form#addVehicleForm
          input(type='text', name='identificador', placeholder='Identificador Vehículo')
          input(type='number', name='idconductor', placeholder='ID Conductor')
          button(type='submit') Añadir Vehículo

      // Conductores Section
      section#drivers
        h2 Conductores
        table#driversTable
          thead
            tr
              th ID Conductor
              th CURP
              th Nombre
              th Teléfono
              th Activo
              th Borrar
          tbody
            // Los datos se llenarán dinámicamente desde el backend

        form#addDriverForm
          input(type='text', name='curp', placeholder='CURP')
          input(type='text', name='name', placeholder='Nombre')
          input(type='text', name='surnamep', placeholder='Apellido Paterno')
          input(type='text', name='surnamem', placeholder='Apellido Materno')
          input(type='text', name='phone', placeholder='Teléfono')
          input(type='number', name='active', placeholder='Activo')
          button(type='submit') Añadir Conductor
          
    footer
      .logo
        img(src='../icons/location-white.svg', alt='Logo')
        span Nintrip
      .school
        h1 Instituto Politécnico Nacional
        br
        h1 Escuela Superior de Cómputo
